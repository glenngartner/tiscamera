# Copyright 2017 The Imaging Source Europe GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

add_subdirectory(PugiXml)

include(ExternalProject)

if (BUILD_ARAVIS)
  if (TCAM_INTERNAL_ARAVIS)

    # check for intltool
    find_package (Intl REQUIRED QUIET)

    option(TCAM_DOWNLOAD_MESON "Download version of meson for compilation purposes" OFF)

    if (TCAM_DOWNLOAD_MESON)

      ExternalProject_Add(meson
        SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/meson
        GIT_REPOSITORY "https://github.com/mesonbuild/meson/"
        GIT_TAG 0.59.0
        CONFIGURE_COMMAND ""
        BUILD_COMMAND ""
        INSTALL_COMMAND ""        # Do not install we are statically linking
        UPDATE_COMMAND ""         # Do not rebuild when calling make
        )

      set(TCAM_MESON_CMD ${CMAKE_CURRENT_SOURCE_DIR}/meson/meson.py)

    else ()

      find_program(EXE_MESON meson REQUIRED)

      execute_process(COMMAND ${EXE_MESON} "--version"
        OUTPUT_VARIABLE TCAM_MESON_VERSION
        )

      if (TCAM_MESON_VERSION VERSION_LESS 0.53.0)

        message(FATAL_ERROR "aravis requires meson => 0.53.0")

      endif (TCAM_MESON_VERSION VERSION_LESS 0.53.0)

      set(TCAM_MESON_CMD meson CACHE INTERNAL "meson build tool executable")
    endif ()

    # meson confugration
    list(APPEND ARAVIS_CONFIG CFLAGS=-fPIC ${TCAM_MESON_CMD} ${CMAKE_CURRENT_SOURCE_DIR}/aravis -Dviewer=disabled -Dgst-plugin=disabled -Dusb=enabled -Dfast-heartbeat=true -Ddocumentation=disabled -Dintrospection=enabled -Ddefault_library=static)

    if (TCAM_ARAVIS_USB_VISION)

      list(APPEND ARAVIS_CONFIG "-Denable-usb=true")

    else (TCAM_ARAVIS_USB_VISION)

      list(APPEND ARAVIS_CONFIG "-Denable-usb=false")

    endif (TCAM_ARAVIS_USB_VISION)

    ExternalProject_Add(aravis
      SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/aravis
      GIT_REPOSITORY "https://github.com/AravisProject/aravis.git"
      GIT_TAG 0.8.18
      CONFIGURE_COMMAND ${ARAVIS_CONFIG}
      BUILD_COMMAND ninja
      INSTALL_COMMAND ""        # Do not install we are statically linking
      UPDATE_COMMAND ""         # Do not rebuild when calling make
      )

    #
    # Get the latest abbreviated commit hash of the working branch
    execute_process(
      COMMAND git log -1 --format=%h
      WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/aravis"
      OUTPUT_VARIABLE ARAVIS_GIT_COMMIT_HASH_INTERNAL
      OUTPUT_STRIP_TRAILING_WHITESPACE
      )

    set(ARAVIS_GIT_COMMIT_HASH "${ARAVIS_GIT_COMMIT_HASH_INTERNAL}" PARENT_SCOPE)
    set(ARAVIS_VERSION "0.8" PARENT_SCOPE)

  else (TCAM_INTERNAL_ARAVIS)

    set(ARAVIS_GIT_COMMIT_HASH "external" PARENT_SCOPE)
    set(ARAVIS_VERSION "unknown" PARENT_SCOPE)

  endif (TCAM_INTERNAL_ARAVIS)

else (BUILD_ARAVIS)

  set(ARAVIS_GIT_COMMIT_HASH "not_configured" PARENT_SCOPE)
  set(ARAVIS_VERSION "not_configured" PARENT_SCOPE)

endif (BUILD_ARAVIS)
